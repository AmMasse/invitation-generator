name: Build Windows Invitation Generator

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller pyinstaller-hooks-contrib
    
    # Build Windows executable with comprehensive module inclusion
    - name: Build Windows executable
      run: |
        pyinstaller --onedir --windowed --name="InvitationGenerator" ^
        --hidden-import="PIL._tkinter_finder" ^
        --hidden-import="pkg_resources.py2_warn" ^
        --hidden-import="PIL" ^
        --hidden-import="PIL.Image" ^
        --hidden-import="tkinter" ^
        --hidden-import="tkinter.filedialog" ^
        --hidden-import="tkinter.messagebox" ^
        --hidden-import="pandas" ^
        --hidden-import="openpyxl" ^
        --hidden-import="reportlab" ^
        --hidden-import="reportlab.pdfgen" ^
        --hidden-import="reportlab.lib" ^
        --hidden-import="reportlab.lib.pagesizes" ^
        --hidden-import="reportlab.lib.colors" ^
        --hidden-import="reportlab.lib.units" ^
        --hidden-import="reportlab.lib.utils" ^
        --hidden-import="customtkinter" ^
        --hidden-import="collections.abc" ^
        --hidden-import="threading" ^
        --hidden-import="json" ^
        --collect-all="PIL" ^
        --collect-all="tkinter" ^
        --collect-all="pandas" ^
        --collect-all="openpyxl" ^
        --collect-all="reportlab" ^
        --collect-all="customtkinter" ^
        --collect-data="customtkinter" ^
        main.py
    
    # Debug: Show what was actually built
    - name: Debug - Show build output
      run: |
        Write-Output "=== Contents of dist directory ==="
        Get-ChildItem dist -Recurse | Select-Object FullName, Length
        Write-Output ""
        Write-Output "=== Looking for executable ==="
        $exe = Get-ChildItem dist -Recurse -Filter "*.exe" | Select-Object -First 1
        if ($exe) {
          Write-Output "Found executable: $($exe.FullName)"
          Write-Output "Size: $($exe.Length) bytes"
        } else {
          Write-Output "No executable found!"
        }
    
    - name: Package Windows app
      run: |
        # Look for either single exe or directory structure
        if (Test-Path "dist/InvitationGenerator.exe") {
          Write-Output "Packaging single executable"
          Compress-Archive -Path "dist/InvitationGenerator.exe" -DestinationPath "dist/InvitationGenerator-Windows.zip"
        } elseif (Test-Path "dist/InvitationGenerator") {
          Write-Output "Packaging directory structure"
          Compress-Archive -Path "dist/InvitationGenerator/*" -DestinationPath "dist/InvitationGenerator-Windows.zip"
        } else {
          Write-Error "No build output found to package!"
          Write-Output "Available files in dist:"
          Get-ChildItem dist -Recurse
          exit 1
        }
    
    # Verify the zip was created and show its contents
    - name: Verify package
      run: |
        if (Test-Path "dist/InvitationGenerator-Windows.zip") {
          $zip = Get-Item "dist/InvitationGenerator-Windows.zip"
          Write-Output "âœ… Package created successfully"
          Write-Output "Package size: $($zip.Length) bytes"
          
          # Show zip contents
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          $zipfile = [System.IO.Compression.ZipFile]::OpenRead($zip.FullName)
          Write-Output "Package contents:"
          $zipfile.Entries | ForEach-Object { Write-Output "  - $($_.Name)" }
          $zipfile.Dispose()
        } else {
          Write-Error "Package was not created!"
          exit 1
        }
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-package
        path: dist/InvitationGenerator-Windows.zip
        retention-days: 30

  create-release:
    needs: [build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: windows-package
        path: ./artifacts
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Invitation Generator ${{ github.ref_name }}
        body: |
          ## Template-Based Invitation Generator - Windows Release
          
          ### Download:
          - **Windows**: InvitationGenerator-Windows.zip (Extract and run InvitationGenerator.exe)
          
          ### Features:
          - Upload custom template backgrounds
          - Precise text positioning (millimeter accuracy)
          - Batch generate personalized invitations
          - Professional A5 PDF output
          - Clickable RSVP buttons
          
          ### Requirements:
          - Excel file with columns: Name, Link, Occasion
          - Template image (PNG/JPG recommended at A5 size)
          
          ### Installation:
          1. Download InvitationGenerator-Windows.zip
          2. Extract the ZIP file 
          3. Run InvitationGenerator.exe from the extracted folder
          4. Upload your template and Excel file and generate invitations!
        draft: false
        prerelease: false
        files: |
          ./artifacts/InvitationGenerator-Windows.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
